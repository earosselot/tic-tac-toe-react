{"version":3,"sources":["components/header/Header.js","components/game-box/GameBox.js","components/game-board/GameBoard.js","components/footer/Footer.js","TicTacToe.js","index.js"],"names":["Header","isGameFinished","className","GameBox","value","onClickGameBox","label","size","onClick","GameBoard","gameBoard","Footer","resetGame","winner","INITIAL_GAME_BOARD","Array","fill","TicTacToe","useState","setGameBoard","setIsGameFinished","getGameWinner","gameBoxIndex","checkEndGame","machineBox","bestScore","Infinity","bestMove","i","length","moveScore","minimax","getMachineMove","winConditions","every","element","positionWinner","find","x","y","z","score","isMaximizer","Math","max","min","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78ceba93.chunk.js","sourcesContent":["import './Header.css'\n\nfunction Header({ isGameFinished }) {\n  return (\n    <header className=\"Header\">\n      <h2>{isGameFinished && 'Game Finished!'}</h2>\n    </header>\n  )\n}\n\nexport default Header","import {CgClose} from 'react-icons/cg'\nimport {FiCircle} from 'react-icons/fi'\n\nfunction GameBox({ value, className, onClickGameBox }) {\n  const label = value === 'X' ? <CgClose size=\"50px\" /> : <FiCircle size=\"45px\" />\n\n  return (\n    <>\n      {<div className={className} onClick={onClickGameBox}>{value && label}</div>}\n    </>\n  )\n}\n\nexport default GameBox","import './GameBoard.css'\nimport GameBox from '../game-box/GameBox'\n\nfunction GameBoard({ gameBoard, onClickGameBox }) {\n  return (\n    <section className=\"GameBoard\">\n      <GameBox onClickGameBox={() => onClickGameBox(0)} className=\"gamebox brd-bottom brd-right\" value={gameBoard[0]}/>\n      <GameBox onClickGameBox={() => onClickGameBox(1)} className=\"gamebox brd-bottom brd-left brd-right\" value={gameBoard[1]}/>\n      <GameBox onClickGameBox={() => onClickGameBox(2)} className=\"gamebox brd-bottom brd-left\" value={gameBoard[2]}/>\n\n      <GameBox onClickGameBox={() => onClickGameBox(3)} className=\"gamebox brd-bottom brd-top brd-right\" value={gameBoard[3]}/>\n      <GameBox onClickGameBox={() => onClickGameBox(4)} className=\"gamebox brd-bottom brd-left brd-top brd-right\" value={gameBoard[4]}/>\n      <GameBox onClickGameBox={() => onClickGameBox(5)} className=\"gamebox brd-bottom brd-left brd-top\" value={gameBoard[5]}/>\n\n      <GameBox onClickGameBox={() => onClickGameBox(6)} className=\"gamebox brd-top brd-right\" value={gameBoard[6]} />\n      <GameBox onClickGameBox={() => onClickGameBox(7)} className=\"gamebox brd-left brd-top brd-right\" value={gameBoard[7]} />\n      <GameBox onClickGameBox={() => onClickGameBox(8)} className=\"gamebox brd-left brd-top\" value={gameBoard[8]} />\n    </section>\n  )\n}\n\n\n\nexport default GameBoard","import './Footer.css'\n\nfunction Footer({isGameFinished, resetGame, winner}) {\n\n  return (\n    <footer className=\"Footer\">\n      {winner && <div>Winner: {winner}</div>}\n      {(isGameFinished && !winner) && <div>Tie</div>}\n      {isGameFinished && <button onClick={resetGame}>New Game</button>}\n    </footer>\n  )\n}\n\nexport default Footer\n","import './TicTacToe.css'\nimport Header from './components/header/Header'\nimport GameBoard from './components/game-board/GameBoard'\nimport Footer from './components/footer/Footer'\nimport { useState } from 'react'\n\nconst INITIAL_GAME_BOARD = Array(9).fill(null)\n\nfunction TicTacToe() {\n  const [gameBoard, setGameBoard] = useState(INITIAL_GAME_BOARD)\n  const [isGameFinished, setIsGameFinished] = useState(false)\n  // const [winner, setWinner] = useState(null)\n\n  function onClickGameBox(gameBoxIndex) {\n    if (!isGameFinished && !gameBoard[gameBoxIndex]) {\n      gameBoard[gameBoxIndex] = 'X'\n      setGameBoard([...gameBoard])\n      const isGameFinished = checkEndGame(gameBoard)\n      setIsGameFinished(isGameFinished)\n\n      if (!isGameFinished) {\n        const machineBox = getMachineMove(gameBoard)\n        gameBoard[machineBox] = 'O'\n        const isGameFinished = checkEndGame(gameBoard)\n        setIsGameFinished(isGameFinished)\n      }\n      setGameBoard([...gameBoard])\n    }\n  }\n\n  function resetGame() {\n    setGameBoard(Array(9).fill(null))\n    setIsGameFinished(false)\n  }\n\n  const winner = getGameWinner(gameBoard)\n\n  return (\n    <div className=\"TicTacToe\">\n      <h1>React TicTacToe</h1>\n      <Header isGameFinished={isGameFinished} />\n      <GameBoard gameBoard={gameBoard} onClickGameBox={onClickGameBox} />\n      <Footer isGameFinished={isGameFinished} resetGame={resetGame} winner={winner} />\n    </div>\n  )\n}\n\nexport default TicTacToe;\n\n\nconst winConditions = [[0,1,2], [3,4,5], [6,7,8], [0,3,6], [1,4,7], [2,5,8], [0,4,8], [2,4,6]]\n\nfunction checkEndGame(gameBoard) {\n  const winner = getGameWinner(gameBoard)\n  if (winner) {\n    return true\n  }\n  const isGameFinished = gameBoard.every(element => element !== null)\n  return isGameFinished\n}\n\nfunction getGameWinner(gameBoard) {\n  const positionWinner = winConditions.find(\n    ([x, y, z]) =>\n      gameBoard[x] === gameBoard[y] &&\n      gameBoard[y] === gameBoard[z] &&\n      gameBoard[x] !== null\n  )\n  if (positionWinner) {\n    return (gameBoard[positionWinner[0]] === 'X' ? 'Player' : 'Computer')\n  }\n\n  return ;\n}\n\n// Computer IA\n\nconst score = {\n  'Computer': 1,\n  'Player': -1,\n  'tie': 0\n}\n\nfunction getMachineMove(gameBoard) {\n  let bestScore = -Infinity\n  let bestMove = null\n  for (let i = 0; i < gameBoard.length; i++) {\n    if (!gameBoard[i]) {\n      gameBoard[i] = 'O'\n      let moveScore = minimax(gameBoard, false)\n      gameBoard[i] = null\n      if (moveScore > bestScore) {\n        bestScore = moveScore\n        bestMove = i\n      }\n    }\n  }\n  return bestMove\n}\n\nfunction minimax(gameBoard, isMaximizer) {\n\n  const gameEnded = checkEndGame(gameBoard)\n  if (gameEnded) {\n    const winner = getGameWinner(gameBoard)\n    return winner ? score[winner] : score['tie']\n  }\n\n  if (isMaximizer) {\n    let bestScore = -Infinity\n    for (let i = 0; i < gameBoard.length; i++) {\n      if (!gameBoard[i]) {\n        gameBoard[i] = 'O'\n        let moveScore = minimax(gameBoard, false)\n        gameBoard[i] = null\n        bestScore = Math.max(moveScore, bestScore)\n      }\n    }\n    return bestScore\n  } else {\n    let bestScore = Infinity\n    for (let i = 0; i < gameBoard.length; i++) {\n      if (!gameBoard[i]) {\n        gameBoard[i] = 'X'\n        let moveScore = minimax(gameBoard, true)\n        gameBoard[i] = null\n        bestScore = Math.min(moveScore, bestScore)\n      }\n    }\n    return bestScore\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TicTacToe from './TicTacToe';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <TicTacToe />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}